<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/4/26/026
 * Time: 16:06
 */

namespace Trochilidae\bin\Core;


use Medoo\Medoo;

class Model extends Medoo
{
    private $table;
    private $entity;
    public function __construct($options = null)
    {
        $database=Config::getConfig('database');
        $this->entity=new Entity();

        $options=[
            'database_type'=>$database->dbtype,
            'database_name'=>$database->dbname,
            'server'=>$database->dbhost,
            'username'=>$database->dbuser,
            'password'=>$database->dbpass,
            'port'=>$database->dbport,
            'prefix'=>$database->prefix,
            'charset'=>$database->charset,
        ];

        parent::__construct($options);

        $reflection = new \ReflectionClass($this);
        $class=explode('\\',$reflection->getName());
        $this->table=str_replace('Model','',$class[count($class)-1]);

    }

    private function throwError(){
        $error=$this->error();
        if($error[1]!=''){
            throw new \Exception("The SQL ".$this->last().' is error,error code is '.$error[0].' error msg is '.$error[count($error)-1]);
            exit();
        }
    }

    public function __call($name, $arguments)
    {
        $arguments=current($arguments);

        if(preg_match('!findBy(\w+)!',$name,$match)){
            if(!is_array($arguments)){
                $arguments=[strtolower($match[1])=>$arguments];
            }
        }

        $result = current($this->__find($arguments));

        $this->throwError();
        if($result==false)
            $result=null;
        return $result;
    }

    public function __find($where){
        return $this->select($this->table,'*',$where);
    }

    public function find($col,$where,$join=null){

        if($join==null){
            $ret=$this->select($this->table,$col,$where);
        }else{
            $ret=$this->select($this->table,$join,$col,$where);
        }
        $this->throwError();

        return $ret;
    }

    public function updateByEntity($data, $where = null){
        $data=$this->entity->EntityToArray($data);
        $ret  = parent::update($this->table, $data, $where); // TODO: Change the autogenerated stub
        $this->throwError();

        return $ret->rowCount();
    }

    public function insertByEntity($datas){
        $datas=$this->entity->EntityToArray($datas);
        parent::insert($this->table, $datas); // TODO: Change the autogenerated stub
        $this->throwError();
        return $this->id();
    }

    public function deleteByEntity($where){
        $ret = parent::delete($this->table, $where); // TODO: Change the autogenerated stub
        $this->throwError();
        return $ret;
    }

}